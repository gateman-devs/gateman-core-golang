name: gateman-deployment

env:
  resourceGroup: "gateman-prod"
  kubernetesVersion: "1.30"
  name: "gateman-deployment"
  registry: "gatemanregistry.azurecr.io"
  imageName: "gateman-server"

on:
  push:
    branches: [staging, main]
  pull_request:
    branches: [staging, main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Log in to Azure
    - name: Azure Login
      uses: Azure/login@v2.2.0
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Log in to Azure Container Registry
    - name: Log in to ACR
      run: |
        az acr login --name ${{ env.registry }}

    # Build Docker image
    - name: Build Docker Image
      run: |
        docker build -t ${{ env.registry }}/${{ env.imageName }}:${{ github.sha }} .

    # Push Docker image to Azure Container Registry
    - name: Push Docker Image to ACR
      run: |
        docker push ${{ env.registry }}/${{ env.imageName }}:${{ github.sha }}

    # Ensure AKS cluster exists
    - name: Ensure AKS Cluster Exists
      id: aks-check
      run: |
        if az aks show -g ${{ env.resourceGroup }} -n ${{ env.name }} &>/dev/null; then
          echo "exists=true" >> $GITHUB_ENV
        else
          az aks create -g ${{ env.resourceGroup }} -n ${{ env.name }} --kubernetes-version ${{ env.kubernetesVersion }} --location eastus --generate-ssh-keys
          echo "exists=false" >> $GITHUB_ENV
        fi

    # Authenticate to AKS
    - name: Authenticate to AKS
      run: |
        az aks get-credentials -g ${{ env.resourceGroup }} -n ${{ env.name }} --overwrite-existing

    # Update Deployment YAML with New Image
    - name: Update Deployment Image
      run: |
        sed -i "s|gatemanregistry.azurecr.io/gateman-server:tag|${{ env.registry }}/${{ env.imageName }}:${{ github.sha }}|g" .github/deployment.yaml

    # Deploy ConfigMap and Secrets
    - name: Deploy ConfigMap and Secrets
      run: |
        kubectl apply -f .github/configmap.yaml
        kubectl apply -f .github/secrets.yaml

    # Deploy Application
    - name: Deploy Application
      run: |
        kubectl apply -f .github/deployment.yaml
        kubectl apply -f .github/hpa.yaml
        kubectl apply -f .github/loadbalancer.yaml
